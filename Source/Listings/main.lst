C51 COMPILER V9.60.0.0   MAIN                                                              12/06/2022 01:53:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2            #include<main.h>
   3          
   4            /*================================Funtion prototype=========================================*/
   5            void extract_buff();
   6            void calc_disp();
   7            void reset_buff();
   8            void reverse(char* str, int len);
   9            int intToStr(int x, char str[], int d);
  10            void ftoa(float n, char* res, int afterpoint);
  11            double round(double soCanLamTron, int chuSo);
  12            void xuly();
  13            void disp_error();
  14            void disp_over();
  15            /*========================================END=================================================*/
  16            
  17            
  18            
  19            /*====================================Variables==============================================*/
  20            /*Data (252.1B) include: Idata (131Bytes) + Data (remain 16bytes) + etc...
  21            xdata: rat nhieu
  22            float, double, long double,long, unsigned long = 4 bytes
  23            int: 2bytes
  24            char, usigned char: 1byte
  25            xdata volatile int pointer =0;
  26          
  27            max float 32767 => Du 16bit nhung phai sd bit lam bit dau, exp, k dc luu tai xdata\
  28            buff result cung k dc luu tai xdata
  29            data float kq = 320.967545454; 
  30            */
  31            
  32            
  33            idata unsigned char buff[25];   // Buffer save string of eqution
  34            idata unsigned char tt1[10];
  35            idata unsigned char tt2[10];    // Two string buffers save two oprerants of Equation
  36            idata volatile int pointer = 0; //Pointer to devide buff string
  37            idata unsigned char buff_result[10];  //Ket qua dc luu vao mang ki tu
  38            idata unsigned char error[]= "Math Error";
  39            idata int flag_error = 0;
  40            idata int negative = 0;
  41            idata int over_mem = 0;
  42            idata unsigned char over_mes[]="Memory Over";
  43            
  44            data float f_operant = 0;
  45            data float l_operant = 0;     //Two interger for store two oprerants in float
  46            data unsigned char sign;      // Store sign of equation
  47            data float result = 0;        // Store the result
  48            data unsigned char key = 0;   // Where key pressed is located 
  49            /*==========================================END===============================================*/
  50          
  51          void main()
  52          {
  53   1        reset_buff();
  54   1        KEY4X4_Init();
C51 COMPILER V9.60.0.0   MAIN                                                              12/06/2022 01:53:49 PAGE 2   

  55   1        LCD_Init();           //Thiet lap cau hinh cho LCD
  56   1        
  57   1        LCD_Clear();
  58   1        LCD_Gotoxy(0,0);
  59   1        LCD_PutString("Hi there!");
  60   1        delay_ms(1000);
  61   1        
  62   1        LCD_Clear_Blink();
  63   1        while(1)
  64   1        {
  65   2          key = KEY4X4_GetKey();      //nhan thu tu phim nhan
  66   2          if (key!=0){                //phat hien co phim nhan
  67   3            if (key !='C'){
  68   4              LCD_PutChar(key); 
  69   4              delay_ms(250);
  70   4              buff[pointer] = key;
  71   4              pointer++;
  72   4              if (key =='='){
  73   5                extract_buff();
  74   5                calc_disp();
  75   5                reset_buff();       //Tinh xong xoa bo nho dem
  76   5              }
  77   4            }
  78   3            else{ 
  79   4              LCD_Clear_Blink();  //Nhan C => Xoa man hinh
  80   4              reset_buff();
  81   4            }
  82   3          } 
  83   2        }
  84   1      }
  85          
  86          void extract_buff(){ 
  87   1        int k = 0;
  88   1        pointer = 0;          // 656565+65545=
  89   1        
  90   1        while(buff[pointer]!='+'&&buff[pointer]!='-'&&buff[pointer]!='X'&&buff[pointer]!=':'){
  91   2          tt1[pointer] = buff[pointer];
  92   2          pointer++;
  93   2        }
  94   1        sign = buff[pointer];
  95   1        pointer++;
  96   1        k = pointer;
  97   1        while(buff[pointer] != '='){
  98   2          tt2[pointer - k] = buff[pointer];
  99   2          pointer++;
 100   2        }
 101   1      }
 102          
 103          void calc_disp(){
 104   1        int i = 0;
 105   1        idata unsigned char verify[10];
 106   1        f_operant = atoi(tt1);
 107   1        l_operant = atoi(tt2);
 108   1        
 109   1        switch (sign){
 110   2          case '+':
 111   2            result = f_operant + l_operant;
 112   2            break;
 113   2          case '-':
 114   2            result = f_operant - l_operant;
 115   2            break;
 116   2          case 'X':
C51 COMPILER V9.60.0.0   MAIN                                                              12/06/2022 01:53:49 PAGE 3   

 117   2            result = f_operant * l_operant;
 118   2            break;
 119   2          case ':':
 120   2            if (l_operant !=0){
 121   3            result = f_operant / l_operant;
 122   3            }
 123   2            else flag_error = 1;
 124   2            break;
 125   2          default:
 126   2            flag_error = 1;
 127   2        }
 128   1        if (result > 0){
 129   2          ftoa(result,verify,3);
 130   2          for (i=0;i<strlen(verify);i++){
 131   3            if (verify[i]=='/'||verify[i]=='+'||verify[i]=='*'||verify[i]==')'||verify[i]=='(')
 132   3              over_mem = 1;
 133   3          }
 134   2        }
 135   1        if (sign == '/'){
 136   2          result = round(result,3);
 137   2          xuly();
 138   2        }
 139   1        else
 140   1          xuly();
 141   1        
 142   1        memset(verify,0,strlen(verify));
 143   1      }
 144          void xuly(){
 145   1          if (result < 0 && flag_error == 0 && over_mem == 0){
 146   2            result = -result;
 147   2            ftoa(result,buff_result,3);
 148   2            //LCD_Clear();
 149   2            LCD_control_off_xy(0,1);
 150   2            LCD_PutChar('-');
 151   2            LCD_PutString(buff_result);
 152   2          }
 153   1          else if(result >=0 && flag_error == 0 && over_mem == 0){
 154   2            ftoa(result,buff_result,3);
 155   2            //LCD_Clear();
 156   2            LCD_control_off_xy(0,1);
 157   2            LCD_PutString(buff_result);
 158   2          }
 159   1          else {
 160   2            if (over_mem == 1 && flag_error == 0)
 161   2              disp_over();
 162   2            else
 163   2              disp_error();
 164   2          }
 165   1      }
 166          void disp_error(){
 167   1        LCD_Clear();
 168   1        LCD_control_off_xy(0,0);
 169   1        LCD_PutString(error);
 170   1      }
 171          void disp_over(){
 172   1        LCD_Clear();
 173   1        LCD_control_off_xy(0,0);
 174   1        LCD_PutString(over_mes);
 175   1      }
 176          double round(double soCanLamTron, int chuSo)
 177          {
 178   1          int temp;
C51 COMPILER V9.60.0.0   MAIN                                                              12/06/2022 01:53:49 PAGE 4   

 179   1          int i, result = 1;
 180   1         
 181   1          //Pow
 182   1          for(i = 1; i <= chuSo; i++)
 183   1          {
 184   2              result *= 10;
 185   2          }
 186   1          temp = soCanLamTron*result;
 187   1          if(temp%10 >= 5)
 188   1          {
 189   2              temp += 1;
 190   2          }
 191   1          soCanLamTron = (double)temp/result;
 192   1          return soCanLamTron;
 193   1      }
 194          void reset_buff(){
 195   1        memset(buff,0,strlen(buff));
 196   1        memset(tt1,0,strlen(tt1));
 197   1        memset(tt2,0,strlen(tt2));
 198   1        memset(buff_result,0,strlen(buff_result));
 199   1        sign = 'n';
 200   1        pointer = 0;
 201   1        flag_error = 0;
 202   1        over_mem = 0;
 203   1      }
 204            
 205          // Reverses a string 'str' of length 'length'
 206          void reverse(char* str, int len)
 207          {
 208   1        int i = 0, j = len - 1, temp;
 209   1        while (i < j) {
 210   2          temp = str[i];
 211   2          str[i] = str[j];
 212   2          str[j] = temp;
 213   2          i++;
 214   2          j--;
 215   2        }
 216   1      }
 217          
 218          // Converts a given integer x to string str[].
 219          // d is the number of digits required in the output.
 220          // If d is more than the number of digits in x,
 221          // then 0s are added at the beginning.
 222          int intToStr(int x, char str[], int d){
 223   1        int i = 0;
 224   1        while (x) {
 225   2        str[i++] = (x % 10) + '0';
 226   2        x = x / 10;
 227   2      }
 228   1      
 229   1      // If number of digits required is more, then
 230   1      // add 0s at the beginning
 231   1      while (i < d) str[i++] = '0';
 232   1      reverse(str, i);
 233   1      str[i] = '\0';
 234   1      return i;
 235   1      }
 236          // Converts a floating-point/double number to a string.
 237          void ftoa(float n, char* res, int afterpoint){
 238   1        // Extract integer part
 239   1        int ipart = (int)n;
 240   1        // Extract floating part
C51 COMPILER V9.60.0.0   MAIN                                                              12/06/2022 01:53:49 PAGE 5   

 241   1        float fpart = n - (float)ipart;
 242   1        // convert integer part to string
 243   1        int i = intToStr(ipart, res, 0);
 244   1        // check for display option after point
 245   1        if (afterpoint != 0){
 246   2          res[i] = '.'; // add dot
 247   2          // Get the value of fraction part upto given no.
 248   2          // of points after dot. The third parameter
 249   2          // is needed to handle cases like 233.007
 250   2          fpart = fpart * pow(10, afterpoint);
 251   2          intToStr((int)fpart, res + i + 1, afterpoint);
 252   2        }
 253   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1501    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      45
   IDATA SIZE       =     86      10
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
